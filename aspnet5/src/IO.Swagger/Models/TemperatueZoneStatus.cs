/*
 * TestAPI
 *
 *  # Introduction   Welcome to the reference for my API!   <a href=\"http://en.wikipedia.org/wiki/REST_API\" target=\"_blank\">REST</a> is a web-service protocol that lends itself to rapid development by using everyday HTTP and JSON technology.   My REST API provides a broad set of operations and resources that:  * Enable x.  * Support y.  * Process z.   ## Endpoints   My API is provided via the following endpoints.   | Tenant                 | Base URL for REST Endpoints    |  |- -- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|  | Production             | https://api.mydomain.com/v1    |  | API Sandbox            | https://sandbox.mydomain.com/v1|     The production endpoint provides access to your live user data. The API Sandbox tenant is a good place to test your code without affecting real-world data. To use it, you must be provisioned with an API Sandbox tenant.   ## Access to the API   If you have a tenant, you already have access to the API.   If you don't have a tenant, go to <a href=\"https://www.mydomain.com/resource/sandbox\" target=\"_blank\">https://www.mydomain.com/resource/sandbox</a> and sign up for a one. # Operations:  ## Basic Info  These are the basic operations for my API...   etc 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@swaggerhub.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// status of a single zone
    /// </summary>
    [DataContract]
    public partial class TemperatueZoneStatus :  IEquatable<TemperatueZoneStatus>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TemperatueZoneStatus" /> class.
        /// </summary>
        /// <param name="Id">the unique identifier for the zone (required).</param>
        /// <param name="Name">the name of the zone.</param>
        /// <param name="Value">the temperature in the zone (required).</param>
        /// <param name="Units">the temperature units (default to &quot;fahrenheit&quot;).</param>
        /// <param name="Timestamp">the timestamp when the temperature was measured (required).</param>
        public TemperatueZoneStatus(string Id = null, string Name = null, double? Value = null, string Units = null, DateTime? Timestamp = null)
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for TemperatueZoneStatus and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Value" is required (not null)
            if (Value == null)
            {
                throw new InvalidDataException("Value is a required property for TemperatueZoneStatus and cannot be null");
            }
            else
            {
                this.Value = Value;
            }
            // to ensure "Timestamp" is required (not null)
            if (Timestamp == null)
            {
                throw new InvalidDataException("Timestamp is a required property for TemperatueZoneStatus and cannot be null");
            }
            else
            {
                this.Timestamp = Timestamp;
            }
            this.Name = Name;
            // use default value if no "Units" provided
            if (Units == null)
            {
                this.Units = "fahrenheit";
            }
            else
            {
                this.Units = Units;
            }
            
        }

        /// <summary>
        /// the unique identifier for the zone
        /// </summary>
        /// <value>the unique identifier for the zone</value>
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// the name of the zone
        /// </summary>
        /// <value>the name of the zone</value>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// the temperature in the zone
        /// </summary>
        /// <value>the temperature in the zone</value>
        [DataMember(Name="value")]
        public double? Value { get; set; }

        /// <summary>
        /// the temperature units
        /// </summary>
        /// <value>the temperature units</value>
        [DataMember(Name="units")]
        public string Units { get; set; }

        /// <summary>
        /// the timestamp when the temperature was measured
        /// </summary>
        /// <value>the timestamp when the temperature was measured</value>
        [DataMember(Name="timestamp")]
        public DateTime? Timestamp { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TemperatueZoneStatus {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((TemperatueZoneStatus)obj);
        }

        /// <summary>
        /// Returns true if TemperatueZoneStatus instances are equal
        /// </summary>
        /// <param name="other">Instance of TemperatueZoneStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TemperatueZoneStatus other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                ) && 
                (
                    this.Units == other.Units ||
                    this.Units != null &&
                    this.Units.Equals(other.Units)
                ) && 
                (
                    this.Timestamp == other.Timestamp ||
                    this.Timestamp != null &&
                    this.Timestamp.Equals(other.Timestamp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                    if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                    if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                    if (this.Units != null)
                    hash = hash * 59 + this.Units.GetHashCode();
                    if (this.Timestamp != null)
                    hash = hash * 59 + this.Timestamp.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(TemperatueZoneStatus left, TemperatueZoneStatus right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TemperatueZoneStatus left, TemperatueZoneStatus right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
